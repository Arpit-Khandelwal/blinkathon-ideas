"use client"
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/maiVLjvZwh1
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { IBM_Plex_Sans } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

ibm_plex_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { useEffect, useState } from "react"
import { Header } from "./Header"

import { supabase } from "@/utils/supabase"
import { fetchIdeas } from "../IdeaParser"


// interface Idea {
//   title: string;
//   description: string;
//   date: string;
//   views: number;
// }

export function Homepage() {
  const [showFileUpload, setShowFileUpload] = useState(false);
  // const [ideas, setIdeas] = useState<Idea[]>([]);
  const [ideas, setIdeas] = useState([]);


  const handleUploadClick = () => {
    setShowFileUpload(true);
  };

  const handleSwitchToUrl = () => {
    setShowFileUpload(false);
  };


  const handleSubmit = async () => {
    const urlInput = document.getElementById('urlInput') as HTMLInputElement;
    const fileInput = document.getElementById('fileInput') as HTMLInputElement;

    console.log(showFileUpload)


    if (showFileUpload && (!urlInput || !urlInput.value)) {
      // Handle case where URL hasn't been input yet
      if (!fileInput || !fileInput.files || fileInput.files.length === 0) return; // Check if file input is empty
      const file = fileInput.files[0];
      const reader = new FileReader();
      reader.onload = async (event) => {
        if (event.target) {
          const jsonData = JSON.parse((event.target.result) ? event.target.result.toString() : "");
          console.log(jsonData); // Handle the parsed data


          // Save to Supabase
          const { data, error } = await supabase
            .from('ideas') // Replace with your table name
            .insert([{ idea: jsonData}]); // Adjusted to match table format

          if (error) console.error('Error saving data:', error);
        }
      };
      reader.readAsText(file);
    } else if (!showFileUpload && (!fileInput)) {
      // Handle case where file hasn't been uploaded
      console.log(urlInput?.value);
      if (!urlInput || !urlInput.value) return; // Check if URL input is empty
      const response = await fetch(urlInput.value);
      const data = await response.json();


      console.log(data); // Handle the fetched data

      // Save to Supabase
      const { error } = await supabase
        .from('ideas') // Replace with your table name
        .insert([{ idea: data}]); // Add upvotes field

      if (error) console.error('Error saving data:', error);
    }
  };

  const handleUpvote = async (ideaId, upvotes) => {
    // Update the upvote count in the database
    const { error } = await supabase
      .from('ideas') // Replace with your table name
      .update({ upvotes: upvotes + 1 }) // Increment upvotes
      .eq('id', ideaId); // Assuming 'id' is the primary key

    if (error) console.error('Error updating upvotes:', error);
  };

  useEffect(() => {
    fetchIdeas().then((data) => {
      setIdeas(data ? data : []);
    });
  }, [showFileUpload]);

  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-1 bg-muted/40 py-12">
        <section className="container mx-auto px-6">
          <div className="max-w-3xl mx-auto text-center space-y-4">
            <h1 className="text-4xl font-bold tracking-tight">Share Your Blinkathon Ideas</h1>
            <p className="text-muted-foreground text-lg">
              Submit your innovative ideas and get feedback from the community.
            </p>
            <div className="flex justify-center gap-4">
              {!showFileUpload ? (
                <>
                  <Input type="text" placeholder="Enter a URL" className="flex-1 max-w-md" id="urlInput" />
                  <Button onClick={handleUploadClick} className="whitespace-nowrap">
                    Upload actions.json
                  </Button>
                </>
              ) : (
                <>
                  <Input type="file" accept=".json" className="flex-1 max-w-md" id="fileInput" />
                  <Button onClick={handleSwitchToUrl} className="whitespace-nowrap">
                    Share URL Instead
                  </Button>
                </>
              )}
              <Button type="submit" className="whitespace-nowrap" onClick={handleSubmit}>
                Submit Idea
              </Button>

            </div>
          </div>
        </section>
        <section className="container mx-auto px-6 py-12">
          <div className="flex items-center justify-between mb-8">

            <div className="flex items-center gap-4">
              <Label htmlFor="sort">Sort by:</Label>
              <Select id="sort">
                <SelectTrigger>
                  <SelectValue placeholder="Newest" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="newest">Newest</SelectItem>
                  <SelectItem value="popular">Popular</SelectItem>
                  <SelectItem value="title">Title</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            {ideas && ideas.map((idea, index) => (
              <Card key={index}>
                <CardHeader>
                  <img src={idea.idea.icon} alt="Idea Icon" className="w-full mb-4" />
                  <CardTitle>{idea.idea.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground">
                    {idea.idea.description}
                  </p>
                </CardContent>
                <CardFooter>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2 text-muted-foreground">
                      <ClockIcon className="w-4 h-4" />
                      <span>{idea.date}</span>
                    </div>
                    <div className="flex items-center gap-2 text-muted-foreground" onClick={() => handleUpvote(idea.id, idea.upvotes)}>
                      <UpvoteIcon className="w-4 h-4 cursor-pointer" />
                      <span>{idea.upvotes} upvotes</span>
                    </div>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
        </section>

      </main>
      {/* <footer className="bg-primary text-primary-foreground py-4 px-6 shadow">
        <div className="container mx-auto flex items-center justify-between">
          <p>&copy; 2023 Blinkathon Ideas. All rights reserved.</p>
          <nav className="flex items-center gap-4">
            <Link href="#" className="hover:underline" prefetch={false}>
              Privacy Policy
            </Link>
            <Link href="#" className="hover:underline" prefetch={false}>
              Terms of Service
            </Link>
          </nav>
        </div>
      </footer> */}
    </div>
  )
}

function ClockIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  )
}

function UpvoteIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 2l-10 10h3v8h14v-8h3z" />
    </svg>
  )
}

function EyeIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}